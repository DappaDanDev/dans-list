{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-cf76da5b5577a2f3fa0d0f0dcf60dbc98751ef36",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/VerifiableMarketplace.sol": "project/contracts/VerifiableMarketplace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200,
        "details": {
          "yul": true,
          "yulDetails": {
            "stackAllocation": true,
            "optimizerSteps": "dhfoDgvulfnTUtnIf"
          }
        }
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/VerifiableMarketplace.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/**\n * @title VerifiableMarketplace\n * @dev A decentralized marketplace with AI-verified listings and agent-based transactions\n */\ncontract VerifiableMarketplace is Ownable, ReentrancyGuard, Pausable {\n    // Marketplace fee in basis points (250 = 2.5%)\n    uint256 public marketplaceFee = 250;\n    uint256 public constant MAX_FEE = 1000; // 10% maximum fee\n\n    // Listing structure\n    struct Listing {\n        address seller;\n        uint256 price;\n        bool sold;\n        bytes32 aiProofHash;\n        uint256 createdAt;\n    }\n\n    // Mappings\n    mapping(string => Listing) public listings;\n    mapping(address => uint256) public sellerBalances;\n\n    // Events\n    event ListingCreated(\n        string indexed listingId,\n        address indexed seller,\n        uint256 price,\n        bytes32 aiProofHash\n    );\n\n    event ListingPurchased(\n        string indexed listingId,\n        address indexed buyer,\n        address indexed seller,\n        uint256 price\n    );\n\n    event MarketplaceFeeUpdated(\n        uint256 oldFee,\n        uint256 newFee\n    );\n\n    event FundsWithdrawn(\n        address indexed recipient,\n        uint256 amount\n    );\n\n    // Custom errors for gas optimization\n    error InvalidPrice();\n    error ListingAlreadyExists();\n    error ListingNotFound();\n    error ListingAlreadySold();\n    error InsufficientPayment();\n    error TransferFailed();\n    error InvalidFee();\n    error NoBalanceToWithdraw();\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Creates a new listing with AI-generated proof\n     * @param listingId Unique identifier for the listing\n     * @param price Price in wei\n     * @param aiProofHash Hash of the AI analysis proof\n     */\n    function createListing(\n        string calldata listingId,\n        uint256 price,\n        bytes32 aiProofHash\n    ) external whenNotPaused {\n        // Validate inputs\n        if (price == 0) revert InvalidPrice();\n        if (listings[listingId].seller != address(0)) revert ListingAlreadyExists();\n\n        // Create listing\n        listings[listingId] = Listing({\n            seller: msg.sender,\n            price: price,\n            sold: false,\n            aiProofHash: aiProofHash,\n            createdAt: block.timestamp\n        });\n\n        emit ListingCreated(listingId, msg.sender, price, aiProofHash);\n    }\n\n    /**\n     * @dev Purchase a listing\n     * @param listingId The ID of the listing to purchase\n     */\n    function purchaseListing(\n        string calldata listingId\n    ) external payable nonReentrant whenNotPaused {\n        Listing storage listing = listings[listingId];\n\n        // Validate listing\n        if (listing.seller == address(0)) revert ListingNotFound();\n        if (listing.sold) revert ListingAlreadySold();\n        if (msg.value < listing.price) revert InsufficientPayment();\n\n        // Mark as sold\n        listing.sold = true;\n\n        // Calculate fees\n        uint256 fee = (listing.price * marketplaceFee) / 10000;\n        uint256 sellerAmount = listing.price - fee;\n\n        // Transfer funds to seller\n        (bool success, ) = listing.seller.call{value: sellerAmount}(\"\");\n        if (!success) revert TransferFailed();\n\n        // Store marketplace fee\n        sellerBalances[owner()] += fee;\n\n        // Refund excess payment if any\n        if (msg.value > listing.price) {\n            (bool refundSuccess, ) = msg.sender.call{value: msg.value - listing.price}(\"\");\n            if (!refundSuccess) revert TransferFailed();\n        }\n\n        emit ListingPurchased(listingId, msg.sender, listing.seller, listing.price);\n    }\n\n    /**\n     * @dev Update marketplace fee (owner only)\n     * @param newFee New fee in basis points\n     */\n    function updateMarketplaceFee(uint256 newFee) external onlyOwner {\n        if (newFee > MAX_FEE) revert InvalidFee();\n\n        uint256 oldFee = marketplaceFee;\n        marketplaceFee = newFee;\n\n        emit MarketplaceFeeUpdated(oldFee, newFee);\n    }\n\n    /**\n     * @dev Withdraw accumulated fees (owner only)\n     */\n    function withdrawFees() external onlyOwner nonReentrant {\n        uint256 balance = sellerBalances[owner()];\n        if (balance == 0) revert NoBalanceToWithdraw();\n\n        sellerBalances[owner()] = 0;\n\n        (bool success, ) = owner().call{value: balance}(\"\");\n        if (!success) revert TransferFailed();\n\n        emit FundsWithdrawn(owner(), balance);\n    }\n\n    /**\n     * @dev Pause contract (owner only)\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause contract (owner only)\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Get listing details\n     * @param listingId The ID of the listing\n     */\n    function getListing(string calldata listingId) external view returns (Listing memory) {\n        return listings[listingId];\n    }\n\n    /**\n     * @dev Check if contract is paused\n     */\n    function isPaused() external view returns (bool) {\n        return paused();\n    }\n\n    /**\n     * @dev Receive function to accept ETH\n     */\n    receive() external payable {\n        // Accept ETH deposits\n    }\n\n    /**\n     * @dev Fallback function\n     */\n    fallback() external payable {\n        // Fallback for calls with data\n    }\n}"
      }
    }
  }
}